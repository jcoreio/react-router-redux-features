// @flow

import type {PlainRoute, RouterState, RouteComponent} from 'react-router'
import {connect} from 'react-redux'
import type {Store} from 'redux'
import {loadFeature} from 'redux-features'
import type {Feature, Features, FeatureStates} from 'redux-features'
import {createSelector} from 'reselect'
import type {FeatureStateAlert as _FeatureStateAlert} from './index'

export type GetRoutes<S, A> = (feature: Feature<S, A>) => ?(PlainRoute | Array<PlainRoute>)

export type Options<S, A> = {
  route: PlainRoute | (store: Store<S, A>) => PlainRoute,
  getRoutes: GetRoutes<S, A>,
  store: Store<S, A>,
  featureId: string,
  featureName: string,
  isServer?: boolean,
  getFeatureStates: (state: S) => FeatureStates,
  getFeatures: (state: S) => Features<S, A>,
  rematchRoutes?: (store: Store<S, A>) => any,
  FeatureStateAlert?: _FeatureStateAlert,
}

declare export default function wrapRoute<S, A>(options: Options<S, A>): PlainRoute;

